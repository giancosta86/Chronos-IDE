/*
 * Chronos implementation of the hospital simulation example
 * published on Professor Silvano Martello's didactic 
 * website (http://www.or.deis.unibo.it/martello.html)
 */

$disableHeapCheck;

queue nonRiskQueue fifo;

NON_RISK := 1;
RISK := 2;

event start {
    global averagePatientsInTimeUnit := readDouble("Average number of patients arriving within a time unit:");
    assert averagePatientsInTimeUnit > 0;
    
    global riskBeds := readInt("Beds in the risk department: ");
    assert riskBeds > 0;
    
    global nonRiskBeds := readInt("Beds in the non-risk department: ");
    assert nonRiskBeds > 0;
    
    global riskProbability := readDouble("P('the arrived patient is a risk patient'): ");
    assert (0 <= riskProbability) and (riskProbability <= 1);
    
    global survivalProbability := readDouble("P('the risk patient survives'): ");
    assert (0 <= survivalProbability) and (survivalProbability <= 1);
    
    global minimumRiskStay := readDouble("Minimum duration of a risk stay: ");
    assert minimumRiskStay > 0;
    
    global maximumRiskStay := readDouble("Maximum duration of a risk stay: ");
    assert maximumRiskStay > 0;
    

    global minimumNonRiskStay := readDouble("Minimum duration of a non-risk stay: ");
    assert minimumNonRiskStay > 0;
    
    global maximumNonRiskStay := readDouble("Maximum duration of a non-risk stay: ");
    assert maximumNonRiskStay > 0;

    global maxSimulatedPatients := readInt("Total number of simulated patients: ");
    assert maxSimulatedPatients > 0;

    global busyRiskBeds := 0;
    global busyNonRiskBeds := 0;
    
    global rejectedPatients := 0;
    global deceasedPatients := 0;
    
    global totalRiskPatients := 0;
    global totalNonRiskPatients := 0;
    
    global totalPatientsInQueue := 0;
    
    global simulatedPatients := 0;    
    
    global totalTimeForRiskPatients := 0;
    global totalTimeForNonRiskPatients := 0;
    
    global totalQueueTime := 0;
    
    create arrival;
    schedule arrival at now;
}


event arrival {
    T := expRandom(1/averagePatientsInTimeUnit);
    schedule arrival after T;
    
    create patient;
    systemEntranceTime(patient) := now;
    queueTime(patient) := 0;
    
    P := uniformRandom(0, 1);    
    if P <= riskProbability {
        if busyRiskBeds < riskBeds {
            type(patient) := RISK;
            
            global busyRiskBeds := busyRiskBeds + 1;
            
            create exitRiskDepartment;
            pat(exitRiskDepartment) := patient;
            
            T := uniformRandom(minimumRiskStay, maximumRiskStay);
            schedule exitRiskDepartment after T;
        } else {
            global rejectedPatients := rejectedPatients + 1;
            destroy patient;
            
            call checkTerminationConditions;
        }
    } else {
        type(patient) := NON_RISK;
        call enterNonRiskDepartment(patient);
    }
}


procedure enterNonRiskDepartment(pa) {
    if busyNonRiskBeds < nonRiskBeds { 
        global busyNonRiskBeds := busyNonRiskBeds + 1;
        
        create exitNonRiskDepartment;
        pat(exitNonRiskDepartment) := pa;
        
        T := uniformRandom(minimumNonRiskStay, maximumNonRiskStay);
        schedule exitNonRiskDepartment after T;        
    } else {
        insert pa into nonRiskQueue;
        
        queueTime(pa) := now;
    }
}


event exitRiskDepartment {
    patient := pat(exitRiskDepartment);
    
    global busyRiskBeds := busyRiskBeds - 1;
    destroy exitRiskDepartment;
    
    P := uniformRandom(0, 1);    
    if P <= survivalProbability {
        call enterNonRiskDepartment(patient);
    } else {
        global totalTimeForRiskPatients := totalTimeForRiskPatients + (now - systemEntranceTime(patient));
        global deceasedPatients := deceasedPatients + 1;
        destroy patient;
        
        call checkTerminationConditions;
    }
}


event exitNonRiskDepartment {
    patient := pat(exitNonRiskDepartment);
    
    if queueTime(patient) > 0 {
        global totalPatientsInQueue := totalPatientsInQueue + 1;
        global totalQueueTime := totalQueueTime + queueTime(patient);
    }
    
    if type(patient) = NON_RISK {
        global totalNonRiskPatients := totalNonRiskPatients + 1;
        global totalTimeForNonRiskPatients := totalTimeForNonRiskPatients + (now - systemEntranceTime(patient));
    } else {    
	global totalRiskPatients := totalRiskPatients + 1;
	global totalTimeForRiskPatients := totalTimeForRiskPatients + (now - systemEntranceTime(patient));
    }
    
    destroy patient;
    
    if isEmpty(nonRiskQueue) {
        global busyNonRiskBeds := busyNonRiskBeds - 1;
        destroy exitNonRiskDepartment;
    } else {
        patient := get first from nonRiskQueue;
        queueTime(patient) := now - queueTime(patient);
        pat(exitNonRiskDepartment) := patient;
        
        T := uniformRandom(minimumNonRiskStay, maximumNonRiskStay);
        schedule exitNonRiskDepartment after T;
    }
    
    call checkTerminationConditions;
}


procedure checkTerminationConditions {   
    global simulatedPatients := simulatedPatients + 1;
    if simulatedPatients < maxSimulatedPatients {
        return;
    }
    
    if totalPatientsInQueue > 0 {
        averageQueueTime := totalQueueTime / totalPatientsInQueue;
        println "Average time spent in queue = " + averageQueueTime;
    } else {
        println "No time spent in queue";
    }
    

    if totalRiskPatients + deceasedPatients > 0 {
        averageRiskTime := totalTimeForRiskPatients / (totalRiskPatients + deceasedPatients);
        println "Average time in the system for risk patients = " + averageRiskTime;
    } else {
        println "Only non-risk patients were simulated";
    }
        
    
    if totalNonRiskPatients > 0 {
        averageNonRiskTime := totalTimeForNonRiskPatients / totalNonRiskPatients;
        println "Average time in the system for non-risk patients = " + averageNonRiskTime;
    } else {
        println "There were only risk patients";
    }
    
    if totalRiskPatients + deceasedPatients + rejectedPatients > 0 {
        rejectionPercentage := 100 * rejectedPatients / (totalRiskPatients + deceasedPatients + rejectedPatients);
        println "Percentage of rejected risk patients = " + rejectionPercentage + "%";
    }
    
    exit;
}


